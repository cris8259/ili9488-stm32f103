ARM GAS  /tmp/ccBZUbeP.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB64:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccBZUbeP.s 			page 2


  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f1xx_it.c **** 
  40:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32f1xx_it.c **** 
  42:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  44:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /******************************************************************************/
  47:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  48:Src/stm32f1xx_it.c **** /******************************************************************************/
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** /**
  51:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  52:Src/stm32f1xx_it.c **** */
  53:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  54:Src/stm32f1xx_it.c **** {
  26              		.loc 1 54 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 7047     		bx	lr
  32              		.cfi_endproc
  33              	.LFE64:
  35              		.section	.text.HardFault_Handler,"ax",%progbits
  36              		.align	1
  37              		.global	HardFault_Handler
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	HardFault_Handler:
  44              	.LFB65:
  55:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  58:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  59:Src/stm32f1xx_it.c **** 
  60:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  61:Src/stm32f1xx_it.c **** }
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /**
  64:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  65:Src/stm32f1xx_it.c **** */
  66:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  67:Src/stm32f1xx_it.c **** {
  45              		.loc 1 67 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
ARM GAS  /tmp/ccBZUbeP.s 			page 3


  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE65:
  56              		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	1
  58              		.global	MemManage_Handler
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	MemManage_Handler:
  65              	.LFB66:
  68:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  69:Src/stm32f1xx_it.c **** 
  70:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  71:Src/stm32f1xx_it.c ****   while (1)
  72:Src/stm32f1xx_it.c ****   {
  73:Src/stm32f1xx_it.c ****   }
  74:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  75:Src/stm32f1xx_it.c **** 
  76:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  77:Src/stm32f1xx_it.c **** }
  78:Src/stm32f1xx_it.c **** 
  79:Src/stm32f1xx_it.c **** /**
  80:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  81:Src/stm32f1xx_it.c **** */
  82:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  83:Src/stm32f1xx_it.c **** {
  66              		.loc 1 83 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
  73 0000 FEE7     		b	.L5
  74              		.cfi_endproc
  75              	.LFE66:
  77              		.section	.text.BusFault_Handler,"ax",%progbits
  78              		.align	1
  79              		.global	BusFault_Handler
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu softvfp
  85              	BusFault_Handler:
  86              	.LFB67:
  84:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  85:Src/stm32f1xx_it.c **** 
  86:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  87:Src/stm32f1xx_it.c ****   while (1)
  88:Src/stm32f1xx_it.c ****   {
  89:Src/stm32f1xx_it.c ****   }
  90:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  91:Src/stm32f1xx_it.c **** 
  92:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
ARM GAS  /tmp/ccBZUbeP.s 			page 4


  93:Src/stm32f1xx_it.c **** }
  94:Src/stm32f1xx_it.c **** 
  95:Src/stm32f1xx_it.c **** /**
  96:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
  97:Src/stm32f1xx_it.c **** */
  98:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
  99:Src/stm32f1xx_it.c **** {
  87              		.loc 1 99 0
  88              		.cfi_startproc
  89              		@ Volatile: function does not return.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.L7:
  94 0000 FEE7     		b	.L7
  95              		.cfi_endproc
  96              	.LFE67:
  98              		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	1
 100              		.global	UsageFault_Handler
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	UsageFault_Handler:
 107              	.LFB68:
 100:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 103:Src/stm32f1xx_it.c ****   while (1)
 104:Src/stm32f1xx_it.c ****   {
 105:Src/stm32f1xx_it.c ****   }
 106:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 107:Src/stm32f1xx_it.c **** 
 108:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 109:Src/stm32f1xx_it.c **** }
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c **** /**
 112:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 113:Src/stm32f1xx_it.c **** */
 114:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 115:Src/stm32f1xx_it.c **** {
 108              		.loc 1 115 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114              	.L9:
 115 0000 FEE7     		b	.L9
 116              		.cfi_endproc
 117              	.LFE68:
 119              		.section	.text.SVC_Handler,"ax",%progbits
 120              		.align	1
 121              		.global	SVC_Handler
 122              		.syntax unified
 123              		.thumb
ARM GAS  /tmp/ccBZUbeP.s 			page 5


 124              		.thumb_func
 125              		.fpu softvfp
 127              	SVC_Handler:
 128              	.LFB69:
 116:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 117:Src/stm32f1xx_it.c **** 
 118:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 119:Src/stm32f1xx_it.c ****   while (1)
 120:Src/stm32f1xx_it.c ****   {
 121:Src/stm32f1xx_it.c ****   }
 122:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 123:Src/stm32f1xx_it.c **** 
 124:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 125:Src/stm32f1xx_it.c **** }
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c **** /**
 128:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 129:Src/stm32f1xx_it.c **** */
 130:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 131:Src/stm32f1xx_it.c **** {
 129              		.loc 1 131 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE69:
 138              		.section	.text.DebugMon_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	DebugMon_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	DebugMon_Handler:
 147              	.LFB70:
 132:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 133:Src/stm32f1xx_it.c **** 
 134:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 135:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 136:Src/stm32f1xx_it.c **** 
 137:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 138:Src/stm32f1xx_it.c **** }
 139:Src/stm32f1xx_it.c **** 
 140:Src/stm32f1xx_it.c **** /**
 141:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 142:Src/stm32f1xx_it.c **** */
 143:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 144:Src/stm32f1xx_it.c **** {
 148              		.loc 1 144 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 7047     		bx	lr
 154              		.cfi_endproc
ARM GAS  /tmp/ccBZUbeP.s 			page 6


 155              	.LFE70:
 157              		.section	.text.PendSV_Handler,"ax",%progbits
 158              		.align	1
 159              		.global	PendSV_Handler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	PendSV_Handler:
 166              	.LFB71:
 145:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 146:Src/stm32f1xx_it.c **** 
 147:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 151:Src/stm32f1xx_it.c **** }
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c **** /**
 154:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 155:Src/stm32f1xx_it.c **** */
 156:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 157:Src/stm32f1xx_it.c **** {
 167              		.loc 1 157 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE71:
 176              		.section	.text.SysTick_Handler,"ax",%progbits
 177              		.align	1
 178              		.global	SysTick_Handler
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	SysTick_Handler:
 185              	.LFB72:
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
 167:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 168:Src/stm32f1xx_it.c **** */
 169:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 170:Src/stm32f1xx_it.c **** {
 186              		.loc 1 170 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBZUbeP.s 			page 7


 190              		.loc 1 170 0
 191 0000 08B5     		push	{r3, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 171:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 174:Src/stm32f1xx_it.c ****   HAL_IncTick();
 196              		.loc 1 174 0
 197 0002 FFF7FEFF 		bl	HAL_IncTick
 198              	.LVL0:
 175:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 199              		.loc 1 175 0
 200 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 201              	.LVL1:
 202 000a 08BD     		pop	{r3, pc}
 203              		.cfi_endproc
 204              	.LFE72:
 206              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 207              		.align	1
 208              		.global	DMA1_Channel4_IRQHandler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	DMA1_Channel4_IRQHandler:
 215              	.LFB73:
 176:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 177:Src/stm32f1xx_it.c **** 
 178:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 179:Src/stm32f1xx_it.c **** }
 180:Src/stm32f1xx_it.c **** 
 181:Src/stm32f1xx_it.c **** /******************************************************************************/
 182:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 183:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 184:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 185:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 186:Src/stm32f1xx_it.c **** /******************************************************************************/
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** /**
 189:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 190:Src/stm32f1xx_it.c **** */
 191:Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 192:Src/stm32f1xx_it.c **** {
 216              		.loc 1 192 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI1:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 193:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 194:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccBZUbeP.s 			page 8


 195:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 196:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 225              		.loc 1 196 0
 226 0002 0248     		ldr	r0, .L17
 227 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 228              	.LVL2:
 229 0008 08BD     		pop	{r3, pc}
 230              	.L18:
 231 000a 00BF     		.align	2
 232              	.L17:
 233 000c 00000000 		.word	hdma_usart1_tx
 234              		.cfi_endproc
 235              	.LFE73:
 237              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 238              		.align	1
 239              		.global	DMA1_Channel5_IRQHandler
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu softvfp
 245              	DMA1_Channel5_IRQHandler:
 246              	.LFB74:
 197:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 198:Src/stm32f1xx_it.c **** 
 199:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 200:Src/stm32f1xx_it.c **** }
 201:Src/stm32f1xx_it.c **** 
 202:Src/stm32f1xx_it.c **** /**
 203:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 204:Src/stm32f1xx_it.c **** */
 205:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 206:Src/stm32f1xx_it.c **** {
 247              		.loc 1 206 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251 0000 08B5     		push	{r3, lr}
 252              	.LCFI2:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 3, -8
 255              		.cfi_offset 14, -4
 207:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 208:Src/stm32f1xx_it.c **** 
 209:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 210:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 256              		.loc 1 210 0
 257 0002 0248     		ldr	r0, .L21
 258 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 259              	.LVL3:
 260 0008 08BD     		pop	{r3, pc}
 261              	.L22:
 262 000a 00BF     		.align	2
 263              	.L21:
 264 000c 00000000 		.word	hdma_usart1_rx
 265              		.cfi_endproc
 266              	.LFE74:
 268              		.text
ARM GAS  /tmp/ccBZUbeP.s 			page 9


 269              	.Letext0:
 270              		.file 2 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/arm-none-eabi/include/mach
 271              		.file 3 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/arm-none-eabi/include/sys/
 272              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 273              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 274              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 275              		.file 7 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/arm-none-eabi/include/sys/
 276              		.file 8 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/arm-none-eabi/include/sys/
 277              		.file 9 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.3.
 278              		.file 10 "/home/human/charles/electronics/arm/compiler/gcc-arm-none-eabi/arm-none-eabi/include/sys
 279              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 280              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 281              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 282              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccBZUbeP.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccBZUbeP.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccBZUbeP.s:36     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:43     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccBZUbeP.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:64     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccBZUbeP.s:78     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:85     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccBZUbeP.s:99     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:106    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccBZUbeP.s:120    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:127    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccBZUbeP.s:139    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:146    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccBZUbeP.s:158    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:165    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccBZUbeP.s:177    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccBZUbeP.s:184    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccBZUbeP.s:207    .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
     /tmp/ccBZUbeP.s:214    .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
     /tmp/ccBZUbeP.s:233    .text.DMA1_Channel4_IRQHandler:000000000000000c $d
     /tmp/ccBZUbeP.s:238    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccBZUbeP.s:245    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccBZUbeP.s:264    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_usart1_tx
hdma_usart1_rx
